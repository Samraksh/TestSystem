using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Diagnostics;
using System.Threading;

namespace TestRig
{
    public class GDB
    {
        public StreamWriter input = null;

        public GdbCommandResult lastResult;
        public GdbEvent ev;
        public bool running;

        public string axf;

        private StringWriter stdOutput = new StringWriter();
        public StringWriter Output { get { return stdOutput; } }
        private StringWriter stdError = new StringWriter();
        public StringWriter Error { get { return stdError; } }

        private static AutoResetEvent ARE_result = new AutoResetEvent(false);
        private static AutoResetEvent ARE_async = new AutoResetEvent(false);

        private Process GDBProcess;
        public MainWindow mainHandle;

        public GDB(MainWindow passedHandle)
        {
            mainHandle = passedHandle;
        }        

        public void Start()
        {
            GDBProcess = new Process();            
            ProcessStartInfo GDBInfo = new ProcessStartInfo();

            System.Diagnostics.Debug.WriteLine("Starting GDB !!!");

            GDBInfo.CreateNoWindow = true;
            GDBInfo.RedirectStandardOutput = true;
            GDBInfo.RedirectStandardInput = true;
            GDBInfo.UseShellExecute = false;
            GDBInfo.RedirectStandardOutput = true;
            GDBInfo.RedirectStandardError = true;
            GDBInfo.Arguments = @"-quiet -fullname --interpreter=mi2";
            GDBInfo.FileName = mainHandle.textBuildSourceryPath + @"\bin\arm-none-eabi-gdb.exe";

            GDBProcess.OutputDataReceived += new DataReceivedEventHandler(StandardOutputHandler);
            GDBProcess.ErrorDataReceived += new DataReceivedEventHandler(StandardErrorHandler);

            GDBProcess.StartInfo = GDBInfo;
            GDBProcess.Start();
            input = GDBProcess.StandardInput;            
            GDBProcess.BeginOutputReadLine();            
            GDBProcess.BeginErrorReadLine();
        }

        public void kill()
        {
            try
            {
                GDBProcess.Kill();
                GDBProcess = null;
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine("GDBProcess already killed. Can't kill again: " + ex.ToString());
            }
        }

        private void StandardOutputHandler(object sendingProcess, DataReceivedEventArgs outLine)
        {
            System.Diagnostics.Debug.WriteLine("******************GDB command result: " + outLine.Data);
            if (!String.IsNullOrEmpty(outLine.Data))
            {
                switch (outLine.Data[0])
                {
                    case '^':
                        lastResult = new GdbCommandResult(outLine.Data);
                        running = (lastResult.Status == CommandStatus.Running);
                        ARE_result.Set();
                        break;
                    case '~':
                    case '&':
                        break;
                    case '*':
                        running = false;
                        ev = new GdbEvent(outLine.Data);
                        ARE_async.Set();
                        break;
                }
            }

        }

        private void StandardErrorHandler(object sendingProcess, DataReceivedEventArgs errLine)
        {
            System.Diagnostics.Debug.WriteLine("*-*-*-*-*-*-GDB error: " + errLine.Data);
        }

        public void Init()
        {
            //axf = mainHandle.tbMFPath.Text + @"\BuildOutput\THUMB2\GCC4.2\le\FLASH\debug\STM32F10x\bin\RegressionTest.axf";
            axf = @"D:\\Work\\images\\emote\\tinyclr.axf";
        }

        public void Load()
        {
            axf = Escape(axf);
            System.Diagnostics.Debug.WriteLine("GDB loading: axf");
            /*RunCommand("-file-exec-and-symbols", Escape(axf));
            RunCommand("-target-select remote localhost:3333");
            RunCommand("monitor soft_reset_halt");
            RunCommand("-target-download");*/
            RunCommand("target remote localhost:3333");
            RunCommand("monitor soft_reset_halt");
            //RunCommand("file " + Escape(axf));
            RunCommand("-file-exec-and-symbols", Escape(axf));
            RunCommand("load");

        }

        public void Continue()
        {
            System.Diagnostics.Debug.WriteLine("GDB continue");
            RunCommand("monitor soft_reset_halt");
            //RunCommand("-exec-continue");
            RunCommand("c");
        }

        private static string Escape(string str)
        {
            if (str == null)
                return null;
            else if (str.IndexOf(' ') != -1 || str.IndexOf('"') != -1)
            {
                str = str.Replace("\"", "\\\"");
                return "\"" + str + "\"";
            }
            else
                return str;
        }

        private GdbCommandResult RunCommand(string command, params string[] args)
        {
            input.WriteLine(command + " " + String.Join(" ", args));
            ARE_result.WaitOne();
            return lastResult;
        }
    }
}
